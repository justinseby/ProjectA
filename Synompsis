Solution: Putting it all together
Selecting transcript lines in this section will navigate to timestamp in the video
(upbeat music) - [Instructor] Welcome back. I hope you were able to work through the challenge and get some practice. Let's go through the solution. 
Step one, create a remote repository. I'll select the plus icon then Repository. I'm going to name mine personal-site.
I can leave this repo set to private since I don't need to share it with anybody. You can always change that in the project setting as well. 
And I'll also include a README, whichever yes option is fine. I've tried to clone an empty repo before in the past and ran into some problems. 
So to save you the headache just include a README file and update it later. Then we'll Create repository. The second step is to clone the repo to make a local copy. 
Let's click the Clone button and make sure this is set to HTTPS, and copy this whole URL and the Git clone command. Then I'll switch to my command line and navigate 
to my git-projects directory so I can clone the repo in there. Then I'll switch to my command line and navigate to the git-projects directory so I can clone the repo here. 
I'm still in my project-b folder from the last exercise, so I'll use cd space dot dot to go back up into the parent directory which is git-projects. Now I can paste the clone
command in and press Enter. If we look in our git-projects folder we can now see the new personal-site directory. On to step three, adding files into the local repo. I'm going 
to move my website template files into my new personal-site folder. Step four, add and commit these changes. The git clone command cloned the repo, but my location in the 
line is still in git-projects, so before I can add and commit these changes I need to cd into the personal-site folder first. I'm just going to run git status, which you can do
at any time, just to see what's going on. Right now it's showing that I have untracked files. That's because I haven't added them yet. I'll do that now. I'll use the git add
command with the dash capital A argument to add in all the new changes. Let's just run git status again. Now it's showing that I have changes ready to be committed, which means
that these files are now in my staging area. So now I can run the git commit command, and I'll add a dash m for message and a short description in quotes, Added base website 
files, and press Enter. Let's just run git status again to see what's changed. Now that I've committed these files into my local repository the status message says, Your branch
is ahead of origin/master by one commit. So I've added one commit to my local. But I haven't pushed it into my remote repo yet. So I won't see it on Bitbucket until I push the
commits. Before we do that let's move on to step five, make a change to the README file. I'll open this file in my text editor, and update it to include some info about the repo
. I'm going to delete all of the template text and just add in a new title, Personal Website. I can also a short description. This project contains the template for my personal 
website. You can even include usage information like for personal use only or contact info, any kind of details that seem relevant to the project can be added here. Save your file
and let's go back to the command line. Now let's add and commit this update, git add dash A to add the change, git commit dash m for the message, Adding revised readme,
and Enter. Now for the last step, push the commits to the remote repo. So far I've added two commits. If I run git status again, we're now going to see that I'm two commits 
ahead. When I run git push it will upload both commits. I also have to tell it where to push to, origin, which refers to the remote repo, and master, which is the branch name.
The push is done. Let's check the Bitbucket repo. And there are my two commits. There's a lot more we can do Git and the command line, but we've learned enough to start i
ncorporating version control into your workflow today. If you want to explore the command line a little more I would suggest reviewing some of the lessons and going through
some of the additional resources that I've referenced to, such as the Atlassian tutorials or the Git documentation.
